---
volumes:
  # loki-data:
  postgres-data:
  prometheus-data:
# grafana-data:
#   driver: local
# grafana_logs:

networks:
  app-network:
    driver: bridge

services:
  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
  #   depends_on:
  #     - python
  #   networks:
  #     - app-network

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     GF_LOG_MODE: file
  #     GF_METRICS_ENABLED: "true"
  #     GF_LOG_DIR: /var/log/grafana
  #     GF_SECURITY_ADMIN_USER: admin
  #     GF_AUTH_ANONYMOUS_ENABLED: true
  #     GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
  #     GF_PROMETHEUS_ENDPOINT_ENABLED: "true"
  #     GF_METRICS_BASIC_AUTH_USERNAME: grafana
  #     GF_SERVER_ROOT_URL: http://localhost:3000
  #     GF_PATHS_PROVISIONING: /etc/grafana/provisioning
  #     GF_PROMETHEUS_ENDPOINT_BASIC_AUTH_USERNAME: grafana
  #     GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
  #     GF_METRICS_BASIC_AUTH_PASSWORD: GRAFANA_METRICS_PASSWORD
  #     GF_PROMETHEUS_ENDPOINT_BASIC_AUTH_PASSWORD: GRAFANA_PROMETHEUS_PASSWORD
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #     - grafana_logs:/var/log/grafana
  #     - ./monitoring/Grafana/grafana-provisioning/datasources/datasources.yml:/etc/grafana/provisioning/datasources/prometheus-datasource.yaml
  #   networks:
  #     - app-network
  #   depends_on:
  #     - loki
  #     - prometheus
  #   restart: unless-stopped

  # loki:
  #   image: grafana/loki:latest
  #   container_name: loki
  #   ports:
  #     - "3100:3100"
  #   volumes:
  #     - ./monitoring/Loki/loki-config.yaml:/etc/loki/loki-config.yaml
  #   command: ["-config.file=/etc/loki/loki-config.yaml"]
  #   networks:
  #     - app-network

  python:
    build:
      context: ./src
      dockerfile: Dockerfile
    deploy:
      resources:
        limits:
          cpus: "0.25"
        reservations:
          cpus: "0.5"
    container_name: python
    volumes:
      - ./src:/app
    environment:
      FLASK_APP: ./app/app.py
      FLASK_ENV: production
      DATABASE_URL: postgresql://POSTGRES_USER:POSTGRES_PASSWORD@postgres:5432/POSTGRES_DB
      PYTHONPATH: /app/
      RABBITMQ_URL: amqp://rabbitmq:5672/
    restart: always
    depends_on:
      # - prometheus
      - postgres
    networks:
      - app-network
    command: flask run --host=0.0.0.0
    ports:
      - "5000:5000"

  # logstash:
  #   image: docker.elastic.co/logstash/logstash:8.6.0
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "1.0"
  #   container_name: logstash
  #   depends_on:
  #     - rabbitmq
  #     - elasticsearch
  #   ports:
  #     - "5044:5044"
  #   volumes:
  #     - ./monitoring/logstash/config:/usr/share/logstash/config
  #     - ./monitoring/logstash/config/jvm.options:/usr/share/logstash/config/jvm.options
  #   networks:
  #     - app-network

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: POSTGRES_USER
      POSTGRES_PASSWORD: POSTGRES_PASSWORD
      POSTGRES_DB: POSTGRES_DB
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/sql/Postgres/PostgreSQL.conf:/etc/postgresql/postgresql.conf
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.25"
        reservations:
          cpus: "1.0"
    container_name: postgres
    ports:
      - "5432:5432"

  rabbitmq:
    image: rabbitmq:3-management
    deploy:
      resources:
        limits:
          cpus: "0.5"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network

  # promtail:
  #   image: grafana/promtail:latest
  #   container_name: promtail
  #   volumes:
  #     - ./monitoring/Promtail/config:/etc/promtail
  #     - ./src/archivo.log:/var/log/archivo.log
  #   networks:
  #     - app-network
  #   depends_on:
  #     - loki
  #   command: ["-config.file=/etc/promtail/promtail-config.yaml"]

  # prometheus:
  #   image: prom/prometheus
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "0.25"
  #       reservations:
  #         cpus: "1.0"
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus-data:/prometheus
  #   networks:
  #     - app-network

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "1.0"
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - ES_JAVA_OPTS=-Xms1g -Xmx1g
  #   ports:
  #     - "9200:9200"
  #   networks:
  #     - app-network

  # zipkin:
  #   image: openzipkin/zipkin
  #   container_name: zipkin
  #   ports:
  #     - "9411:9411"
  #     - "9410:9410"
  #   environment:
  #     - STORAGE_TYPE=mem
  #     - METRICS_EXPORTER=prometheus
  #   networks:
  #     - app-network
